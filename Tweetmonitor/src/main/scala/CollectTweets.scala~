import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.SparkContext._
import org.apache.spark.streaming.twitter._
import org.apache.spark.SparkConf
import org.apache.spark.Logging
import org.apache.log4j.{Level, Logger}
import twitter4j._

object CollectTweets{  
def main(args: Array[String]){
 
StreamingExamples.setStreamingLogLevels()
val twitter_auth = new TwitterFactory(auth.config)
val a = new twitter4j.auth.OAuthAuthorization(auth.config)
private var partitionsEachInterval = 5
//val outputDir = sys.env.getOrElse("OUTPUT_DIR", "")

val atwitter : Option[twitter4j.auth.Authorization] =  Some(twitter_auth.getInstance(a).getAuthorization())

val ssc = new StreamingContext("local[4]", "Simple App",Seconds(2),"/path/to/spark-1.3.0-incubating",Seq("target/scala-2.10/simple-project_2.10-1.0.jar"))
val tweets = TwitterUtils.createStream(ssc, atwitter)

tweets.foreachRDD((rdd, time) => {
      val count = rdd.count()
      if (count > 0) {
        val outputRDD = rdd.repartition(partitionsEachInterval)
        outputRDD.saveAsTextFile("/home/priyanka/Desktop/tweets" + "/tweets_" + time.milliseconds.toString)
        numTweetsCollected += count
        if (numTweetsCollected > numTweetsToCollect) {
          System.exit(0)
        }
      }
    })
ssc.checkpoint(checkpointDir)
ssc.start()
ssc.awaitTermination()

val statuses = tweets.map(status => status.getText())

//val english=new Array("1")
//val engstatus=statuses.filter(new FilterQuery())    
//val engstatus=statuses.filter(language=en)    
//val words = statuses.flatMap(status => status.split(" "))
//val hashtags = words.filter(word => word.startsWith("#"))
statuses.print()

 }
}
object auth{
      val config = new twitter4j.conf.ConfigurationBuilder()
        .setOAuthConsumerKey("Q1kDkGBTtZJTFAgOE5YFcD8MU")
        .setOAuthConsumerSecret("sLeyuPa97xyHICEFLCj0PZjUbR3Pb2jpY2wwEOB60OMnVq23Kp")
        .setOAuthAccessToken("2287489038-SxNAoyiCcn3Z7evfCFGKNCKy5zriiG4F8Cuwkvy")
        .setOAuthAccessTokenSecret("4njaurDQDoDM5SUtMU3C4jzgieDoWSwWBMBM2V4ngBcFA")
        .build
            }

object StreamingExamples extends Logging {
def setStreamingLogLevels() {
val log4jInitialized = Logger.getRootLogger.getAllAppenders.hasMoreElements
if (!log4jInitialized) {
logInfo("Setting log level to [WARN] for streaming example." +" To override add a custom log4j.properties to the classpath.")
Logger.getRootLogger.setLevel(Level.WARN)
    }
  }
}
 
